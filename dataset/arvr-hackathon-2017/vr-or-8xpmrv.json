{
    "source": "https://devpost.com/software/vr-or-8xpmrv",
    "title": "Affordable Haptic Feedback Tool for Surgical Training",
    "blurb": "VR\u2019s ability to \u201ctouch us back\u201d can be the difference between life and death in surgical training",
    "awards": [],
    "videos": [
        "https://www.youtube.com/embed/pYo-0m0_K2I?enablejsapi=1&hl=en_US&rel=0&start=&version=3&wmode=transparent"
    ],
    "images": [
        {
            "title": "Schematic of how the Scalpel could work, including the rotational base",
            "src": "https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/546/550/datas/original.png"
        },
        {
            "title": "Robotic arm",
            "src": "https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/546/531/datas/original.jpg"
        },
        {
            "title": "Schematic of how feedback is provided by friction servos",
            "src": "https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/546/551/datas/original.png"
        },
        {
            "title": "Schematic detailing how the servo provides feedback to the user",
            "src": "https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/546/552/datas/original.png"
        },
        {
            "title": "User interacting with the 3D environment. Project of the 3D environment in a big screen is also possible",
            "src": "https://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/546/903/datas/original.JPG"
        }
    ],
    "team": [
        {
            "name": "Helena Deus",
            "about": "I built a virtual model of the \"arm\" in Unity to simulate force in each potentiometer. I worked on the documentation. ",
            "photo": "https://avatars2.githubusercontent.com/u/770297?height=180&v=4&width=180"
        },
        {
            "name": "Uwe Gruenefeld",
            "about": "Development of Software components.",
            "photo": "https://avatars2.githubusercontent.com/u/6775963?height=180&v=4&width=180"
        },
        {
            "name": "Mo Kakwan",
            "about": "",
            "photo": "https://avatars0.githubusercontent.com/u/315474?height=180&v=4&width=180"
        },
        {
            "name": "MichalTL",
            "about": "",
            "photo": "https://graph.facebook.com/1847290348631592/picture?height=180&width=180"
        },
        {
            "name": "HarrisAli1291",
            "about": "",
            "photo": "https://avatars0.githubusercontent.com/u/32585935?height=180&v=4&width=180"
        }
    ],
    "built_with": [
        "arduino",
        "c#",
        "node.js",
        "openscad",
        "unity"
    ],
    "content_html": "<div>\n<h1>Who we are</h1>\n<p>Team name: VR-OR<br/>\nTeam Lead: Mo Kakwan<br/>\nOther Members: Helena Deus, Uwe Gruenefeld, Alisha Harris, Michal Leszczynski<br/>\nCategory: Healthcare &amp; Medicine<br/></p>\n<h2>Inspiration</h2>\n<h3>Inspiration was a personal story for each one of us</h3>\n<p>AH: One of my best friends is a surgeon. She shared with me that she was appalled by the lack of quality of surgical procedures performed in developing countries. There is lack of resources to buy sophisticated and highly accurate robotic surgical and simulation surgical equipment. It must be possible to circumvent these problems in the digital age with a simpler way to provide high-level affordable training to those highly passionate doctors.<br/>\nMK: My cousin uses the Da Vinci machine for most of his surgical procedures. I asked him \u201cwhat kind of haptic feedback does it give?\u201d He said: \u201cnone whatsoever\u201d. And it is so expensive they do not even publish price ranges on the website.<br/>\nML: At my previous company a surgeon came to us with a vision to provide a more consistent cardiac surgery training. Why? 5-10% fewer patients experience severe complications if the surgeon has frequent interaction with the procedure.<br/>\nUG: The best thing is that opportunities are limitless \u2013 no need for material engineering to simulate new surgical procedures. In fact, any skill that requires delicate manual work can be honed with this approach!<br/>\nHD: It is startling that the amazing advances in VR were not nearly matched by feedback mechanisms that could come with them. Joystick vibration was hip in the 90s when I got my first Nintendo\u2026 We need a \u201cGoogle Cardboard for Haptic Devices\u201d<br/></p>\n<p>In summary, we are inspired to offer a solution to VR-aided surgery training that is:<br/>\nAffordable \u2013 it should be the \"google cardboard\" for haptic devices<br/>\nOriginal and Innovative \u2013 even super-expensive surgical gear does not give haptic feedback today<br/>\nMorally necessary \u2013 can save people\u2019s life and health through better training of surgeons<br/>\nWidely applicable \u2013 should be easy to adapt to other applications such as paintbrushes or other handheld devices<br/>\nAddressing a niche \u2013 visuals progressed at crazy pace since 90s, feedback mechanisms have not. It is time to change that.<br/></p>\n<h2>What it does</h2>\n<p>We have developed a piece of hardware \u2013 a robotic arm \u2013 that is able to provide haptic feedback and thus provide a much more immersive AR/VR experience that can be help develop muscle memory and even help students and others empathize with surgeons.</p>\n<h2>How we built it</h2>\n<p>The architecture for the proposed solution included hardware components such as sensors and 3D printed joints and software components, including Unity and an input/output module interfaced with arduino via node.js.</p>\n<p>Platforms: Arduino IDE, Blender, Unity<br/>\nDevelopment tools: MonoDeveloper, SublimeText, Atom<br/>\nSDKs &amp; APIs: None<br/>\nAssets: CAD models, copyright free mp3, Unity pre-fab sphere, Blender model of a scalpel (all assets in github)<br/>\nLibraries: Vuforia, nodejs-websocket, serialport<br/>\n<a href=\"https://github.com/Reality-Virtually-Hackathon/VR-OR/tree/master/unity/Assets\" rel=\"nofollow\">Github Link</a></p>\n<p>Hardware: For the robotic arm, we used 3 potentiometers, 2 common wood skewers (\u201cbones\u201d) and 3D printed wheels and \u201csockets\u201d that acted as the joints between the various components. The \u201cscalpel\u201d consisted of another skewer connected to the tip of the arm using a spherical magnet. Wiring was also used to connect the potentiometers to an arduino platform (model Uno R3), which in turn connected to a computer via a USB port. The robotic arm as a whole <a href=\"https://github.com/Reality-Virtually-Hackathon/VR-OR/blob/master/documentation/pictures/robotic_arm.jpg\" rel=\"nofollow\">(see picture)</a> was allowed to freely rotate around a base (up to 270\u00b0). The \u201cscalpel\u201d itself includes a multi-target - a 2D printed cube, with a different texture in each face, optimized to capture orientation of the blade. The haptic feedback is achieved through the use of servo motors - these are connected to the wheels at the joints and, upon feedback from the 3D virtual model, prevent the rotation of the potentiometers (holding them in place), the effect of which is felt as tension on the \u201cscalpel\u201d when an object in the virtual world is touched. The models for all 3D printed objects were created using OpenScad.</p>\n<p>Software: Each potentiometer generates input information in the form of serials. These values are integrated into Unity via a websocket which connects to a node.js server listening to the input available via a USB port  <a href=\"https://github.com/Reality-Virtually-Hackathon/VR-OR/blob/master/documentation/diagrams/architecture.pdf\" rel=\"nofollow\">(see architecture)</a>. Each of the 3 inputs are transformed into proxies for motion in a 3D vortex space. Blender was used to create a 3D model of the \u201cscalpel\u201d and imported into unity. Unity\u2019s physics engine was then used to represent the mesh deformation and the force associated  \u2013 a sphere mesh is generated on the fly representing the objects that the \u201cscalpel\u201d is cutting. The distance between the scalpel and the center of the sphere is used to compute a value for \u201cforce\u201d, which reflects the resistance of the interaction between the scalpel and the skin. Finally, the force is transmitted to the servo motor controlling the forward/backward potentiometer motion. </p>\n<h2>Challenges we ran into</h2>\n<p>Hardware:<br/>\n1) The \u201cbones\u201d were too heavy to be held together only by our 3D printed joints. This was a challenge early on. Our solution was to add three wheels, one in each joint, which were connected to each other by a string, offering structural support. This solution turned out to also allow a nice mechanism to connect the servo engine.<br/>\n2) At first we connected the wheels with rubber bands, but then it turned out that they are too elastic, i.e. even if a wheel is blocked by a servo motor, the arm can move some more before the band is stretched and starts to give feedback. Substituting rubber bands with dental floss, which is not elastic, helped with this. It also can be cut at any length desired.<br/>\n3) Precisely detecting in the 3D world each of the 6 degrees of freedom (3 axis x 2 direction in each) in our system. We solved this with 3 potentiometers, held together with 3D printed pieces and stabilized by servo motors.<br/>\n4) Friction provided by the arm itself. In an ideal world, there would be zero feedback from the arm when the pen / scalpel is not touching anything (i.e. only friction provided by air), which is not the case for us (friction of the wheels at the base and joints). Moreover, the \u201cnatural\u201d feedback of the arm is different depending on its position and direction of pen / scalpel movement. Solving / optimizing this as a next step post-hackathon.<br/>\n5) We \"burned\" our first arduino board soldering to the wrong pins. The only solution was to buy a new board<br/></p>\n<p>Software:<br/>\n1) Input/Output: one problem we needed to solve well, given the need for very accurate tracking of the tip of the scalpel in 3D space. Errors in sensor Input: the sensor input should in principle work but the sensors kept emitting numbers when the object was stable. This caused some difficulties as it made the virtual object vibrate when in fact it should be static.<br/>\n2) Detection of scalpel direction: in real life motion, the scalpel doesn\u2019t just move along one axis at a time, there is a 6-degree of freedom movement that we needed to capture. To do this, we implemented a mechanism of multi-targets. Our initial solution was to add a single image target, which only worked for one degree of freedom. In the next iteration, we create a paper cube and attached that to the back of the scalpel. Each face of the cube was printed with a natural pattern (e.g. pebbles), which significantly improved detection. To know exactly what is the rotation of the scalpel regardless of tracking we took this even one step further and printed a cube with a different pattern on each face. The faces were 60mm in size. <br/>\n3) Calculation of force: In our system, we needed to represent how force associated with each of 6 degrees of freedom was transferred to each of the 3 robotic arm: for forward/backward motion resistance, up/down motion resistance and left/right motion resistance. As a first step, we can only distinguish between presence or absence of resistance. <br/></p>\n<h2>Accomplishments that we're proud of</h2>\n<p>1) The complexity of the interaction with a robotic arm was reduced to 3 simple numbers which could be easily manipulated to extrapolate to a virtual reality and then again used as feedback to the haptic device.<br/>\n2) The elegance of the mechanism for transforming deformation of an object in Unity into a force or tension value that can be applied in the real world<br/>\n3) Extraordinarily good and productive interaction between curious and passionate teammates who will likely become good friends<br/></p>\n<h2>What we learned</h2>\n<p>1) That open source tools make it relatively straightforward to connect the real world to the virtual world - in both directions<br/>\n2) To not try to work with hardware when you\u2019re tired, boards can get fried :-)<br/>\n3) Unity is a great tool for coders and non-coders alike who want to get jump started into VR as it offers flexibility and power without loss of intuitiveness<br/>\n4) Plan, be realistic about deadlines, solve the full problem first without falling into rabbit holes and then iterate over the solution to perfect it. <br/>\n5) That anything is possible with hard work, determination and when we're all aligned with one goal and vision in mind.<br/></p>\n<h2>What's next for VR-OR</h2>\n<p>We are not going to rock the world in two days, but we can start building a bridge to something that will. The next stage has three objectives: <br/>\n1) to implement and test/increase robustness of the approach, in particular the hardware component - to bring it to a point where it delivers a satisfactory experience without compromising simplicity and affordability (e.g. replacing dental floss with a chain, optimizing size of elements, improving sturdiness);  <br/>\n2) to increase the size of the components used in the robotic arm, use more robust connections or at least larger pieces; <br/>\n3) to apply the solution to as many use cases as possible and prepare a DIY guide and videos to inspire others (e.g. school teachers) and support its growth via the open source community. <br/></p>\n<p>At the end of this Hackaton, we were not too far from a solution that could become the <strong>\u201cGoogle Cardboard for Heptic Devices\u201d</strong> but more testing and documenting is needed so that other are able to contribute. Open sourcing the 3D models will get other smart and curious developers involved in improving the whole system. </p>\n</div>",
    "content_md": "\n# Who we are\n\n\nTeam name: VR-OR  \n\nTeam Lead: Mo Kakwan  \n\nOther Members: Helena Deus, Uwe Gruenefeld, Alisha Harris, Michal Leszczynski  \n\nCategory: Healthcare & Medicine  \n\n\n\n## Inspiration\n\n\n### Inspiration was a personal story for each one of us\n\n\nAH: One of my best friends is a surgeon. She shared with me that she was appalled by the lack of quality of surgical procedures performed in developing countries. There is lack of resources to buy sophisticated and highly accurate robotic surgical and simulation surgical equipment. It must be possible to circumvent these problems in the digital age with a simpler way to provide high-level affordable training to those highly passionate doctors.  \n\nMK: My cousin uses the Da Vinci machine for most of his surgical procedures. I asked him \u201cwhat kind of haptic feedback does it give?\u201d He said: \u201cnone whatsoever\u201d. And it is so expensive they do not even publish price ranges on the website.  \n\nML: At my previous company a surgeon came to us with a vision to provide a more consistent cardiac surgery training. Why? 5-10% fewer patients experience severe complications if the surgeon has frequent interaction with the procedure.  \n\nUG: The best thing is that opportunities are limitless \u2013 no need for material engineering to simulate new surgical procedures. In fact, any skill that requires delicate manual work can be honed with this approach!  \n\nHD: It is startling that the amazing advances in VR were not nearly matched by feedback mechanisms that could come with them. Joystick vibration was hip in the 90s when I got my first Nintendo\u2026 We need a \u201cGoogle Cardboard for Haptic Devices\u201d  \n\n\n\nIn summary, we are inspired to offer a solution to VR-aided surgery training that is:  \n\nAffordable \u2013 it should be the \"google cardboard\" for haptic devices  \n\nOriginal and Innovative \u2013 even super-expensive surgical gear does not give haptic feedback today  \n\nMorally necessary \u2013 can save people\u2019s life and health through better training of surgeons  \n\nWidely applicable \u2013 should be easy to adapt to other applications such as paintbrushes or other handheld devices  \n\nAddressing a niche \u2013 visuals progressed at crazy pace since 90s, feedback mechanisms have not. It is time to change that.  \n\n\n\n## What it does\n\n\nWe have developed a piece of hardware \u2013 a robotic arm \u2013 that is able to provide haptic feedback and thus provide a much more immersive AR/VR experience that can be help develop muscle memory and even help students and others empathize with surgeons.\n\n\n## How we built it\n\n\nThe architecture for the proposed solution included hardware components such as sensors and 3D printed joints and software components, including Unity and an input/output module interfaced with arduino via node.js.\n\n\nPlatforms: Arduino IDE, Blender, Unity  \n\nDevelopment tools: MonoDeveloper, SublimeText, Atom  \n\nSDKs & APIs: None  \n\nAssets: CAD models, copyright free mp3, Unity pre-fab sphere, Blender model of a scalpel (all assets in github)  \n\nLibraries: Vuforia, nodejs-websocket, serialport  \n\n[Github Link](https://github.com/Reality-Virtually-Hackathon/VR-OR/tree/master/unity/Assets)\n\n\nHardware: For the robotic arm, we used 3 potentiometers, 2 common wood skewers (\u201cbones\u201d) and 3D printed wheels and \u201csockets\u201d that acted as the joints between the various components. The \u201cscalpel\u201d consisted of another skewer connected to the tip of the arm using a spherical magnet. Wiring was also used to connect the potentiometers to an arduino platform (model Uno R3), which in turn connected to a computer via a USB port. The robotic arm as a whole [(see picture)](https://github.com/Reality-Virtually-Hackathon/VR-OR/blob/master/documentation/pictures/robotic_arm.jpg) was allowed to freely rotate around a base (up to 270\u00b0). The \u201cscalpel\u201d itself includes a multi-target - a 2D printed cube, with a different texture in each face, optimized to capture orientation of the blade. The haptic feedback is achieved through the use of servo motors - these are connected to the wheels at the joints and, upon feedback from the 3D virtual model, prevent the rotation of the potentiometers (holding them in place), the effect of which is felt as tension on the \u201cscalpel\u201d when an object in the virtual world is touched. The models for all 3D printed objects were created using OpenScad.\n\n\nSoftware: Each potentiometer generates input information in the form of serials. These values are integrated into Unity via a websocket which connects to a node.js server listening to the input available via a USB port [(see architecture)](https://github.com/Reality-Virtually-Hackathon/VR-OR/blob/master/documentation/diagrams/architecture.pdf). Each of the 3 inputs are transformed into proxies for motion in a 3D vortex space. Blender was used to create a 3D model of the \u201cscalpel\u201d and imported into unity. Unity\u2019s physics engine was then used to represent the mesh deformation and the force associated \u2013 a sphere mesh is generated on the fly representing the objects that the \u201cscalpel\u201d is cutting. The distance between the scalpel and the center of the sphere is used to compute a value for \u201cforce\u201d, which reflects the resistance of the interaction between the scalpel and the skin. Finally, the force is transmitted to the servo motor controlling the forward/backward potentiometer motion. \n\n\n## Challenges we ran into\n\n\nHardware:  \n\n1) The \u201cbones\u201d were too heavy to be held together only by our 3D printed joints. This was a challenge early on. Our solution was to add three wheels, one in each joint, which were connected to each other by a string, offering structural support. This solution turned out to also allow a nice mechanism to connect the servo engine.  \n\n2) At first we connected the wheels with rubber bands, but then it turned out that they are too elastic, i.e. even if a wheel is blocked by a servo motor, the arm can move some more before the band is stretched and starts to give feedback. Substituting rubber bands with dental floss, which is not elastic, helped with this. It also can be cut at any length desired.  \n\n3) Precisely detecting in the 3D world each of the 6 degrees of freedom (3 axis x 2 direction in each) in our system. We solved this with 3 potentiometers, held together with 3D printed pieces and stabilized by servo motors.  \n\n4) Friction provided by the arm itself. In an ideal world, there would be zero feedback from the arm when the pen / scalpel is not touching anything (i.e. only friction provided by air), which is not the case for us (friction of the wheels at the base and joints). Moreover, the \u201cnatural\u201d feedback of the arm is different depending on its position and direction of pen / scalpel movement. Solving / optimizing this as a next step post-hackathon.  \n\n5) We \"burned\" our first arduino board soldering to the wrong pins. The only solution was to buy a new board  \n\n\n\nSoftware:  \n\n1) Input/Output: one problem we needed to solve well, given the need for very accurate tracking of the tip of the scalpel in 3D space. Errors in sensor Input: the sensor input should in principle work but the sensors kept emitting numbers when the object was stable. This caused some difficulties as it made the virtual object vibrate when in fact it should be static.  \n\n2) Detection of scalpel direction: in real life motion, the scalpel doesn\u2019t just move along one axis at a time, there is a 6-degree of freedom movement that we needed to capture. To do this, we implemented a mechanism of multi-targets. Our initial solution was to add a single image target, which only worked for one degree of freedom. In the next iteration, we create a paper cube and attached that to the back of the scalpel. Each face of the cube was printed with a natural pattern (e.g. pebbles), which significantly improved detection. To know exactly what is the rotation of the scalpel regardless of tracking we took this even one step further and printed a cube with a different pattern on each face. The faces were 60mm in size.   \n\n3) Calculation of force: In our system, we needed to represent how force associated with each of 6 degrees of freedom was transferred to each of the 3 robotic arm: for forward/backward motion resistance, up/down motion resistance and left/right motion resistance. As a first step, we can only distinguish between presence or absence of resistance.   \n\n\n\n## Accomplishments that we're proud of\n\n\n1) The complexity of the interaction with a robotic arm was reduced to 3 simple numbers which could be easily manipulated to extrapolate to a virtual reality and then again used as feedback to the haptic device.  \n\n2) The elegance of the mechanism for transforming deformation of an object in Unity into a force or tension value that can be applied in the real world  \n\n3) Extraordinarily good and productive interaction between curious and passionate teammates who will likely become good friends  \n\n\n\n## What we learned\n\n\n1) That open source tools make it relatively straightforward to connect the real world to the virtual world - in both directions  \n\n2) To not try to work with hardware when you\u2019re tired, boards can get fried :-)  \n\n3) Unity is a great tool for coders and non-coders alike who want to get jump started into VR as it offers flexibility and power without loss of intuitiveness  \n\n4) Plan, be realistic about deadlines, solve the full problem first without falling into rabbit holes and then iterate over the solution to perfect it.   \n\n5) That anything is possible with hard work, determination and when we're all aligned with one goal and vision in mind.  \n\n\n\n## What's next for VR-OR\n\n\nWe are not going to rock the world in two days, but we can start building a bridge to something that will. The next stage has three objectives:   \n\n1) to implement and test/increase robustness of the approach, in particular the hardware component - to bring it to a point where it delivers a satisfactory experience without compromising simplicity and affordability (e.g. replacing dental floss with a chain, optimizing size of elements, improving sturdiness);   \n\n2) to increase the size of the components used in the robotic arm, use more robust connections or at least larger pieces;   \n\n3) to apply the solution to as many use cases as possible and prepare a DIY guide and videos to inspire others (e.g. school teachers) and support its growth via the open source community.   \n\n\n\nAt the end of this Hackaton, we were not too far from a solution that could become the **\u201cGoogle Cardboard for Heptic Devices\u201d** but more testing and documenting is needed so that other are able to contribute. Open sourcing the 3D models will get other smart and curious developers involved in improving the whole system. \n\n\n"
}